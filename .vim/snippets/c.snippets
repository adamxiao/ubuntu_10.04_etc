# main()
snippet main
	int main(int argc, char *argv[])
	{
		${1}
		return 0;
	}
# #include <...>
snippet inc
	#include <${1:stdio}.h>${2}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet def
	#define 
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
# (the randomizer code is taken directly from TextMate; it could probably be
# cleaner, I don't know how to do it in vim script)
snippet once
	#ifndef ${1:`toupper('_'.Filename('', 'UNTITLED').'_')`}
	#define $1

	${2}

	#endif /* end of include guard: $1 */
#snippet once
#	#ifndef ${1:`toupper(Filename('', 'UNTITLED').'_'.system("/usr/bin/ruby -e 'print (rand * 2821109907455).round.to_s(36)'"))`}
#
#	#define $1
#
#	${2}
#
#	#endif /* end of include guard: $1 */
# If Condition
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}
snippet el
	else {
		${1}
	}
# Switch Condition
snippet switch
	switch (${1:/* condition */})
	{
	case ${2:/* code */} :
		break;
	default :
		break;
	}
# Tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# While Loop
snippet while
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# While Loop
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# For Loop
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4:/* code */}
	}
# Custom For Loop
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5:/* code */}
	}
# Function
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}
# Function Declaration
snippet fund
	${1:void} ${2:function_name}(${3});${4}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# Typedef struct
snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
# Typdef enum
snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
snippet .
	[${1}]${2}
snippet un
	unsigned$1
# added by adam 2012-10-01##################################################
snippet #!
	/*!
	 * \file `expand('%:t')`
	 * \brief ${1}
	 * 
	 * \author `g:snips_author` (`g:snips_authorref`), `g:snips_email` 
	 * \date `system("date '+%Y-%m-%d %H:%M:%S'")`
	 */
	${2}
# added by adam 2012-03-11##################################################
snippet is
	#include <${1:stdio}.h>${2}
snippet in
	#include "${1:`Filename('', 'UNTITLED')`}.h"${2}
#snippet in
#	#include "${1:`Filename("$1.h")`}"${2}
snippet de
	#define ${1}
# code snippet
snippet get_local_ip
	#include <sys/socket.h>
	#include <netinet/in.h>
	#include <arpa/inet.h>
	#include <unistd.h>
	#include <sys/ioctl.h>
	#include <stdio.h>
	#include <sys/types.h>
	#include <sys/socket.h>
	#include <linux/if.h>
	#include <syslog.h>

	// copy from http://topic.csdn.net/t/20050830/20/4240583.html
	char *get_local_ip()
	{
		int MAXINTERFACES=16;
		char *ip=NULL;
		int fd, intrface;
		struct ifreq buf[MAXINTERFACES];
		struct ifconf ifc;

		if ((fd = socket(AF_INET, SOCK_DGRAM, 0)) >= 0) {
			ifc.ifc_len = sizeof buf;
			ifc.ifc_buf = (caddr_t)buf;
			if (!ioctl(fd, SIOCGIFCONF, (char *)&ifc)) {
				intrface = ifc.ifc_len / sizeof(struct ifreq);

				while (intrface-- > 0) {
					if (!(ioctl(fd, SIOCGIFADDR, (char *)&buf[intrface]))) {
						ip=(inet_ntoa(((struct sockaddr_in*)(&buf[intrface].ifr_addr))->sin_addr));
						break;
					}

				}
			}
			close (fd);
		}
		return ip;
	}

# added by adam 2015-10-26 #################################################
snippet #func
	/*!
	 * \brief ${1}
	 *
	 * \param null [I] NULL
	 * \return 
	 *
	 * \author `g:snips_author`
	 * \date `system("date '+%Y-%m-%d'")`
	 */
# error log
snippet err
	ERROR_LOG("${1:%s}"${2});${3}
snippet ERROR_LOG
	ERROR_LOG("${1:%s}"${2});${3}
# info log
snippet info
	INFO_LOG("${1:%s}"${2});${3}
snippet INFO_LOG
	INFO_LOG("${1:%s}"${2});${3}
# debug log
snippet debug
	DEBUG_LOG("${1:%s}"${2});${3}
snippet DEBUG_LOG
	DEBUG_LOG("${1:%s}"${2});${3}
