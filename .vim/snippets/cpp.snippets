# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	
	private:
		${3:/* data */}
	};

snippet try
	try {
		${1:/* code */}
	} catch(${2:const std::exception& e}) {
		${3:std::cerr << e.what() << '\n';}
	}

snippet formap
	map<${3:int}, ${4:string}>::iterator ${1:iter};
	for (${1:iter} = ${2:mMap}.begin(); ${1:iter} != ${2:mMap}.end(); ${1:iter}++) {
		${5:/* code */}
	}

snippet forlist
	list<${2:string}>::iterator ${0:iter};
	for (${0:iter} = ${1:lList}.begin(); ${0:iter} != ${1:lList}.end(); ${0:iter}++) {
		${3:/* code */}
	}

snippet forvector
	vector<${3:string}>::iterator ${1:iter};
	for (${1:iter} = ${2:vVec}.begin(); ${1:iter} != ${2:vVec}.end(); ${1:iter}++) {
		${4:/* code */}
	}

# -------------------------------------------------------------------------
# utility
snippet atoi
	hydra::fs2u32(${1:str})${2}
snippet time
	time(NULL)


# -------------------------------------------------------------------------
# crm20 project
snippet crm_class_h crm原子服务头文件
	#include "DCAtomService.h"
	#include "DCServiceConfig.h"
	#include "DCCrmDBAgent.h"
	//#include "DCServiceStructDef.h"

	CRM_USE_NAMESPACE(base) //DCBuffer域 => access目录
	CRM_USE_NAMESPACE(dal) //DBOperater,DataSet等数据库操作域 => dal目录
	CRM_USE_NAMESPACE(cfg) //DCSQLConfig,DCServiceConfiger等配置域 => config目录

	CRM_NAMESPACE_BEGIN(svc)

	//TODO: define class in and out struct
	//定义出入参数结构体,注意命名,注意类型跟数据库字段类型的搭配
	//json入参结构体
	struct ST$1_in
	{
	};

	//json出参结构体,再次提醒，数据长度要跟表tb_pub_paramcodedetail数据一模一样
	struct ST$1_out
	{
	};

	class CRM_SVC ${1:`Filename()`} : public DCAtomService
	{
		DYN_CLASS_DECLARE($1)
	public:
		/**
		 * @brief  构造函数 
		 *        
		 * @param[in] clsName  默认参数，类名
		 *
		 * @retval 
		 */
		$1(const char *clsName="$1");
		/**
		 * @brief 析构函数
		 *        
		 * @param[in] 
		 *
		 * @retval 
		 */
		~$1();
	public:
		/**
		 * @brief 获取输入参数
		 *        
		 * @param[in] pBuffer 参数缓冲区
		 *
		 * @retval <0 失败
		 */
		int GetInputParam(DCObject *pBuffer);
		/**
		 * @brief 设置输出缓冲区
		 *        
		 * @param[in] pBuffer 参数缓冲区指针
		 *
		 * @retval <0 失败
		 */
		int SetOutputParam(DCObject *pBuffer);
		/**
		 * @brief 服务处理函数
		 *        
		 * @param[in] N/A
		 *
		 * @retval <0 失败
		 */
		int BusinessProcess();
		/**
		 * @brief 
		 *        
		 * @param[in]  
		 * @retval 
		 */
		int ResetStatus();
	private:
		// TODO: choose class member
		//定义类成员变量，存储json入参的解析结果，或者sql返回结果
		//list<ST$1_in>		m_InDataList;
		ST$1_in				m_InData;
		list<ST$1_out>		m_OutDataList;
		//ST$1_out			m_OutData;

	};

	CRM_NAMESPACE_END()

snippet crm_class_cpp crm原子服务源文件
	#include "${1:`Filename()`}.h"
	#include "DCTuxBuffer.h"
	#include "DCServiceMacro.h"
	#include "DCCommService.h"
	#include "DCCrmUtilis.h"

	CRM_NAMESPACE_BEGIN(svc)

	DYN_CLASS_IMP($1)

	/**
	 * @brief  构造函数 
	 *        
	 * @param[in] clsName  默认参数，类名
	 *
	 * @retval 
	 */
	$1::$1(const char *clsName/* = */):
	DCAtomService(clsName)
	{
		// TODO: init class object
		//原子服务初始化
		m_nSvrType = ATOM_SERVICE_TYPE_SELECT;    //原子服务类型,有ATOM_SERVICE_TYPE_{SELECT,UPDATE,INSERT,DELETE,COMBO}
		strcpy(m_szPublishName, "ADAM_SERVICE_NAME");

		memset((void*)&m_InData, 0, sizeof(m_InData));
		//memset((void*)&m_OutData, 0, sizeof(m_OutData));
	}

	/**
	 * @brief 析构函数
	 *        
	 * @param[in] 
	 *
	 * @retval 
	 */
	$1::~$1()
	{
		//do nothing
	}

	/**
	 * @brief 获取输入参数
	 *        
	 * @param[in] pBuffer 参数缓冲区
	 *
	 * @retval <0 失败
	 */
	int $1::GetInputParam(DCObject *pBuffer)
	{
		// TODO: get input
		crm_getinput$2

		return 0;
	}


	/**
	 * @brief 设置输出缓冲区
	 *        
	 * @param[in] pBuffer 参数缓冲区指针
	 *
	 * @retval <0 失败
	 */
	int $1::SetOutputParam(DCObject *pBuffer)
	{
		// TODO: set output
		crm_setoutput$3

		return 0;
	}


	/**
	 * @brief 服务处理函数
	 *        
	 * @param[in] N/A
	 *
	 * @retval <0 失败
	 */
	int $1::BusinessProcess()
	{
		// TODO: code need to be optimized
		int nErrorCode = 0;
		char cntKey[32] = {0};
		int class_id = 0;
		char * pSql = NULL;
		DCDataSet *pDataSet = NULL;

		//初始化数据库连接
		//TODO: replace sql
		//ReplaceSql((cntKey,"{[LATN_ID:%ld]}", m_InData.LATN_ID));
		ReplaceSql((cntKey,""));
		DCDBConnection *pConnection = (DCDBConnection*)((DCCommService*)GetParent())->GetServiceConnection(cntKey,this);
		if (pConnection == NULL)
		{
			CRM_LOG((LC_ERROR,"get database connection failed"));
			this->SetErrorMsg(CRM_ERROR_SERVICE_GETCONN_FAILED,"get database connection failed");
			return -1;
		}
		DCCrmDBAgent dbAgent;
		dbAgent.SetConnection(pConnection);

		// 获取sql并且执行，最后获取结果
		//TODO: execute sql
		crm_sql$4

		return 0;
	}


	/**
	 * @brief 
	 *        
	 * @param[in]  
	 * @retval 
	 */
	int $1::ResetStatus()
	{
		//TODO:clean old data
		memset(&m_InData, 0, sizeof(m_InData));
		//memset(&m_InData, 0, sizeof(m_OutData));
		//m_InDataList.clear();
		m_OutDataList.clear();

		m_nRowTotal = 0;
		return $1::ResetStatus();
	}

	CRM_NAMESPACE_END()

snippet crm_getinput json入参传入多个对象参数
	DCTuxBuffer *pTuxBuffer = (DCTuxBuffer*)pBuffer;
	DCTuxBuffer *pSubBuffer = NULL;
	//json入参传入多个对象参数
	ST${2:`Filename()`}_in        st$2_in;

	//开始获取传入json参数，并存储到特定的数据结构中去
	pTuxBuffer->RsOpen();
	//json入参传入多个对象参数
	while(pTuxBuffer->RsFetchRow())
	{
		//获取到入参对象，存储起来
		int ret = pTuxBuffer->RsGetNestedCol("${1:adam_getinput_1}",(DCBuffer**)&pSubBuffer);
		if (ret < 0)
		{
			emlogger(LC_ERROR,"get parameter[$1] failed");
			return CRM_ERROR_SERVICE_GETINPUT_FAILED;
		}
		if (ret == 0)
		{
			continue;
		}

		memset(&st$2_in, 0x00, sizeof(st$2_in));

		// TODO: 获取参数
		getcol$3
		
		m_InDataList.push_back(st$2_in);
	}
#end crm_getinput ------
snippet crm_getinput json入参传入单个单个的参数
	DCTuxBuffer *pTuxBuffer = (DCTuxBuffer*)pBuffer;
	// TODO: json入参传入单个单个的参数
	getvalue$1
#end crm_getinput ------
snippet crm_setoutput json出参传出多个对象参数
	DCTuxBuffer *pTuxBuffer = (DCTuxBuffer*)pBuffer;
	// TODO: json出参传出多个对象参数
	DCTuxBuffer *pDataBuffer = NULL;
	char retFml32Tag[32] = "${2:adam_setoutput_1}";

	//申请返回结果的tuxedo Buffer
	pDataBuffer = (DCTuxBuffer *)(pTuxBuffer->CreateNesteBuffer(retFml32Tag,sizeof(ST${1:`Filename()`}_out) * m_OutDataList.size(), (int)SEND_BUF));
	if(pDataBuffer == NULL)
	{
		CRM_LOG((LC_ERROR,"create nested buffer respBody failed"));
		this->SetErrorMsg(CRM_ERROR_BUFPTR_ISNULL,"[objectName : %s] SetOutputParam is Failed",this->GetClassName());
		return -1;
	}

	pDataBuffer->RsOpen();
	list<ST$1_out>::iterator iter = m_OutDataList.begin();
	for (; iter != m_OutDataList.end(); iter++)
	{
		pDataBuffer->RsAddRow();
		// TODO: 设置多个传出参数
		setcol$3
		pDataBuffer->RsSaveRow();
	}

	//设置返回Buffer
	pTuxBuffer->SetfValue(retFml32Tag, pDataBuffer);
#end crm_setoutput ------
snippet crm_setoutput json出参传出单个单个的参数
	DCTuxBuffer *pTuxBuffer = (DCTuxBuffer*)pBuffer;
	// TODO: 传出单个的出参
	setval$1
#end crm_setoutput ------
snippet crm_sql 执行一条sql,查询sql，返回多条记录
	// TODO: choose sql id
	class_id = $1;
	pSql = m_pSQLConfig->GetSql(class_id);
	if ( pSql == NULL)
	{
		emlogger(LC_ERROR,"get sql[%ld] failed",class_id);
		this->SetErrorMsg(CRM_ERROR_SERVICE_SQL_FAILED,"get sql[%ld] failed",class_id);
		return -1;
	}
	// TODO: replace sql '%'
	//pSql= (char*)ReplaceSql((cntKey, (char *)pSql, m_InData.LATN_ID));
	// TODO动态增加额外的sql语句
	crm_add_extra_sql

	//设置分页
	dbAgent.SetPage(m_pPubReq->nPageIndex, m_pPubReq->nPageSize);

	if((nErrorCode = dbAgent.SetSql(class_id,true)) < 0)
	{
		CRM_LOG((LC_ERROR,dbAgent.GetErrorMsg()));
		this->SetErrorMsg(nErrorCode,"Set SQL[%d] failed",class_id);
		return -1;
	}
	if((nErrorCode = dbAgent.PrepareSQL(pSql)) < 0)
	{
		emlogger(LC_ERROR,"prepare SQL[%ld] failed",class_id);
		this->SetErrorMsg(nErrorCode,"prepare SQL[%ld] failed",class_id);
		return -1;
	}
	// TODO: set bind data
	if ((nErrorCode = dbAgent.BindParam((void*)&m_InData)) < 0)
	{
		emlogger(LC_ERROR,"bind SQL[%ld] failed",class_id);
		this->SetErrorMsg(nErrorCode,"bind SQL[%ld] failed",class_id);
		return -1;
	}
	// TODO:动态绑定额外的sql语句
	crm_bind_extra

	//sql查询
	pDataSet = dbAgent.Open();
	if (NULL == pDataSet)
	{
		emlogger(LC_ERROR,"execute sql[%ld] failed",class_id);
		this->SetErrorMsg(CRM_ERROR_EXE_SQl_FAILED,"execute sql[%ld] failed",class_id);
		return -1;
	}
	int row = 0;
	ST${2:`Filename()`}_out st$2_out[DEF_PAGE_SIZE] = {0};
	while((row = pDataSet->GetRows((void*)st$2_out, DEF_PAGE_SIZE)) > 0)
	{
		m_OutDataList.insert(m_OutDataList.end(), st$2_out, st$2_out+row);
		m_nRowTotal += row;
	}

	if (row < 0)
	{
		emlogger(LC_ERROR,"get dataset failed for sql[%ld]",class_id);
		this->SetErrorMsg(CRM_ERROR_DATASET_FAILED,"get dataset failed for sql[%ld]",class_id);
		return -1;
	}
	emlogger(LC_DEBUG, "query end => result len[%d]\n", m_OutDataList.size());
	m_nRowTotal = dbAgent.GetTotalCount();
#end crm_sql ------
snippet crm_sql 执行一条查询sql, 返回1条记录
	// TODO: choose sql id
	class_id = $1;
	pSql = m_pSQLConfig->GetSql(class_id);
	if ( pSql == NULL)
	{
		emlogger(LC_ERROR,"get sql[%ld] failed",class_id);
		this->SetErrorMsg(CRM_ERROR_SERVICE_SQL_FAILED,"get sql[%ld] failed",class_id);
		return -1;
	}
	// TODO: replace sql '%'
	//pSql= (char*)ReplaceSql((cntKey, (char *)pSql, m_InData.LATN_ID));

	if((nErrorCode = dbAgent.SetSql(class_id,true)) < 0)
	{
		CRM_LOG((LC_ERROR,dbAgent.GetErrorMsg()));
		this->SetErrorMsg(nErrorCode,"Set SQL[%ld] failed",class_id);
		return -1;
	}
	if((nErrorCode = dbAgent.PrepareSQL(pSql)) < 0)
	{
		emlogger(LC_ERROR,"prepare SQL[%ld] failed",class_id);
		this->SetErrorMsg(nErrorCode,"prepare SQL[%ld] failed",class_id);
		return -1;
	}
	// todo : set bind data
	if ((nErrorCode = dbAgent.BindParam((void*)&m_InData)) < 0)
	{
		emlogger(LC_ERROR,"bind SQL[%ld] failed",class_id);
		this->SetErrorMsg(nErrorCode,"bind SQL[%ld] failed",class_id);
		return -1;
	}

	//sql查询
	if (NULL == (pDataSet = dbAgent.Open()))
	{
		emlogger(LC_ERROR,"execute sql[%ld] failed",class_id);
		this->SetErrorMsg(CRM_ERROR_EXE_SQl_FAILED,"execute sql[%ld] failed",class_id);
		return -1;
	}
	if ((pDataSet->GetRows((void*)&m_OutData, 1)) < 0) {
		emlogger(LC_ERROR,"get dataset failed for sql[%ld]",class_id);
		this->SetErrorMsg(CRM_ERROR_DATASET_FAILED,"get dataset failed for sql[%ld]",class_id);
		return -1;
	}
#end crm_sql ------
snippet crm_sql 执行一条sql,不返回结果
	// TODO: choose sql id
	class_id = $1;
	pSql = m_pSQLConfig->GetSql(class_id);
	if ( pSql == NULL)
	{
		emlogger(LC_ERROR,"get sql [class_id=%ld] failed",class_id);
		this->SetErrorMsg(CRM_ERROR_SERVICE_SQL_FAILED,"get sql [class_id=%ld] failed",class_id);
		return CRM_ERROR_SERVICE_SQL_FAILED;
	}
	// TODO: replace sql '%'
	//pSql= (char*)ReplaceSql((cntKey, (char *)pSql, m_InData.LATN_ID));

	if((nErrorCode = dbAgent.SetSql(class_id,true)) < 0)
	{
		CRM_LOG((LC_ERROR,dbAgent.GetErrorMsg()));
		this->SetErrorMsg(nErrorCode,"Set SQL[%ld] failed",class_id);
		return -1;
	}
	if((nErrorCode = dbAgent.PrepareSQL(pSql)) < 0)
	{
		emlogger(LC_ERROR,"prepare SQL[%ld] failed",class_id);
		this->SetErrorMsg(nErrorCode,"prepare SQL[%ld] failed",class_id);
		return -1;
	}
	//crm_split_field
	if ((nErrorCode = dbAgent.BindParam((void*)&m_InData)) < 0)
	{
		emlogger(LC_ERROR,"prepare SQL[%ld] failed",class_id);
		this->SetErrorMsg(nErrorCode,"prepare SQL[%ld] failed",class_id);
		return -1;
	}

	if (!dbAgent.Execute())
	{    
		emlogger(LC_ERROR,"execute sql failed for class_id=[%ld]",class_id);
		this->SetErrorMsg(CRM_ERROR_EXE_SQl_FAILED,"execute sql failed for class_id=[%ld]",class_id);
		return CRM_ERROR_EXE_SQl_FAILED;
	}
#end crm_sql ------
snippet crm_funcsql 执行一条sql,查询sql，返回多条记录
	// TODO: choose sql id
	class_id = $1;
	pSql = m_pSQLConfig->GetSql(class_id);
	if ( pSql == NULL)
	{
		emlogger(LC_ERROR,"get sql[%ld] failed",class_id);
		this->SetErrorMsg(CRM_ERROR_SERVICE_SQL_FAILED,"get sql[%ld] failed",class_id);
		return -1;
	}
	// TODO: replace sql '%'
	//pSql= (char*)ReplaceSql((cntKey, (char *)pSql, m_InData.LATN_ID));

	//设置分页
	dbAgent.SetPage(m_pPubReq->nPageIndex, m_pPubReq->nPageSize);

	if((nErrorCode = dbAgent.SetSql(class_id,true)) < 0)
	{
		CRM_LOG((LC_ERROR,dbAgent.GetErrorMsg()));
		this->SetErrorMsg(nErrorCode,"Set SQL[%d] failed",class_id);
		return -1;
	}
	if((nErrorCode = dbAgent.PrepareSQL(pSql)) < 0)
	{
		emlogger(LC_ERROR,"prepare SQL[%ld] failed",class_id);
		this->SetErrorMsg(nErrorCode,"prepare SQL[%ld] failed",class_id);
		return -1;
	}
	// TODO: set bind data
	if ((nErrorCode = dbAgent.BindParam((void*)&m_InData)) < 0)
	{
		emlogger(LC_ERROR,"bind SQL[%ld] failed",class_id);
		this->SetErrorMsg(nErrorCode,"bind SQL[%ld] failed",class_id);
		return -1;
	}

	//sql查询
	pDataSet = dbAgent.Open();
	if (NULL == pDataSet)
	{
		emlogger(LC_ERROR,"execute sql[%ld] failed",class_id);
		this->SetErrorMsg(CRM_ERROR_EXE_SQl_FAILED,"execute sql[%ld] failed",class_id);
		return -1;
	}
	int row = 0;
	ST${2:`Filename()`}_out st$2_out[DEF_PAGE_SIZE] = {0};
	while((row = pDataSet->GetRows((void*)st$2_out, DEF_PAGE_SIZE)) > 0)
	{
		m_OutDataList.insert(m_OutDataList.end(), st$2_out, st$2_out+row);
		m_nRowTotal += row;
	}

	if (row < 0)
	{
		emlogger(LC_ERROR,"get dataset failed for sql[%ld]",class_id);
		this->SetErrorMsg(CRM_ERROR_DATASET_FAILED,"get dataset failed for sql[%ld]",class_id);
		return -1;
	}
	emlogger(LC_DEBUG, "query end => result len[%d]\n", m_OutDataList.size());
#end crm_funcsql ------
snippet crm_funcsql 执行一条查询sql, 返回1条记录
	// TODO : define the function
	int ${1:func_name}(DCDBConnection *pConnection,DCDataSet *pDataSet,long latn_id,${2:char *mkt_res_inst_code}, ${3:STSql1067Out & st_out})
	{
		int nErrorCode;
		DCCrmDBAgent dbAgent;
		dbAgent.SetConnection(pConnection);

		// TODO: choose sql id
		long class_id = $1;
		char *pSql = m_pSQLConfig->GetSql(class_id);
		if ( pSql == NULL)
		{
			emlogger(LC_ERROR,"get sql[%ld] failed",class_id);
			this->SetErrorMsg(CRM_ERROR_SERVICE_SQL_FAILED,"get sql[%ld] failed",class_id);
			return -1;
		}
		// TODO: replace sql '%'
		//char cntKey[32] = {0};
		//ReplaceSql((cntKey, "{[LATN_ID:%ld]}", latn_id));
		//pSql= (char*)ReplaceSql((cntKey, (char *)pSql, latn_id));

		if((nErrorCode = dbAgent.SetSql(class_id,true)) < 0)
		{
			CRM_LOG((LC_ERROR,dbAgent.GetErrorMsg()));
			this->SetErrorMsg(nErrorCode,"Set SQL[%ld] failed",class_id);
			return -1;
		}
		if((nErrorCode = dbAgent.PrepareSQL(pSql)) < 0)
		{
			emlogger(LC_ERROR,"prepare SQL[%ld] failed",class_id);
			this->SetErrorMsg(nErrorCode,"prepare SQL[%ld] failed",class_id);
			return -1;
		}
		// TODO : set bind param
		if ((nErrorCode = dbAgent.BindParam((void*)&st_bind)) < 0)
		{
			emlogger(LC_ERROR,"bind SQL[%ld] failed",class_id);
			this->SetErrorMsg(nErrorCode,"bind SQL[%ld] failed",class_id);
			return -1;
		}

		//sql查询
		if (NULL == (pDataSet = dbAgent.Open()))
		{
			emlogger(LC_ERROR,"execute sql[%ld] failed",class_id);
			this->SetErrorMsg(CRM_ERROR_EXE_SQl_FAILED,"execute sql[%ld] failed",class_id);
			return -1;
		}
		// TODO : get rows
		int row = pDataSet->GetRows((void*)&st_out, 1);
		if (row < 0) {
			emlogger(LC_ERROR,"get dataset failed for sql[%ld]",class_id);
			this->SetErrorMsg(CRM_ERROR_DATASET_FAILED,"get dataset failed for sql[%ld]",class_id);
			return -1;
		}
		if (row == 0) {
			emlogger(LC_ERROR,"Query result is empty for sql[%ld]",class_id);
			this->SetErrorMsg(-1,"Query result is empty for sql[%ld]",class_id);
			return 0;
		}

		return CRM_SUCC;
	}
#end crm_funcsql ------
snippet crm_funcsql 执行一条sql,不返回结果
	// TODO : define the function
	int ${1:func_name}(DCDBConnection *pConnection,long latn_id,${2:STSql1067Bind & st_bind})
	{
		int nErrorCode;
		DCCrmDBAgent dbAgent;
		dbAgent.SetConnection(pConnection);

		// TODO: choose sql id
		long class_id = $1;
		char *pSql = m_pSQLConfig->GetSql(class_id);
		if ( pSql == NULL)
		{
			emlogger(LC_ERROR,"get sql [class_id=%ld] failed",class_id);
			this->SetErrorMsg(CRM_ERROR_SERVICE_SQL_FAILED,"get sql [class_id=%ld] failed",class_id);
			return CRM_ERROR_SERVICE_SQL_FAILED;
		}
		// TODO: replace sql '%'
		//char cntKey[32] = {0};
		//ReplaceSql((cntKey, "{[LATN_ID:%ld]}", latn_id));
		//pSql= (char*)ReplaceSql((cntKey, (char *)pSql, latn_id));

		if((nErrorCode = dbAgent.SetSql(class_id,true)) < 0)
		{
			CRM_LOG((LC_ERROR,dbAgent.GetErrorMsg()));
			this->SetErrorMsg(nErrorCode,"Set SQL[%ld] failed",class_id);
			return -1;
		}
		if((nErrorCode = dbAgent.PrepareSQL(pSql)) < 0)
		{
			emlogger(LC_ERROR,"prepare SQL[%ld] failed",class_id);
			this->SetErrorMsg(nErrorCode,"prepare SQL[%ld] failed",class_id);
			return -1;
		}
		//crm_split_field
		// TODO : set bind
		if ((nErrorCode = dbAgent.BindParam((void*)&st_bind)) < 0)
		{
			emlogger(LC_ERROR,"prepare SQL[%ld] failed",class_id);
			this->SetErrorMsg(nErrorCode,"prepare SQL[%ld] failed",class_id);
			return -1;
		}

		if (!dbAgent.Execute())
		{    
			emlogger(LC_ERROR,"execute sql failed for class_id=[%ld]",class_id);
			this->SetErrorMsg(CRM_ERROR_EXE_SQl_FAILED,"execute sql failed for class_id=[%ld]",class_id);
			return CRM_ERROR_EXE_SQl_FAILED;
		}

		return CRM_SUCC;
	}
#end crm_funcsql ------
snippet crm_callfuncsql 查询sql，返回一条记录
	// TODO : set bind data
	// STSqlBind st_bind;
	nErrorCode = ${1:func_name}(pConnection,${2:m_InData.LATN_ID},${3:st_bind});
	if(nErrorCode < 0) {
		this->SetErrorMsg(-1,"{\'RESULT\':\'1\',\'RESULT_MSG\':\'更新营销资源实例状态失败\',\'MKT_RES_INST_CODE\':\'%s\'}",iter->MKT_RES_INST_CODE);
		return -1; 
	}
#end crm_callfuncsql
snippet crm_callfuncsql 执行sql，不返回结果
	// TODO : set bind data
	// STSqlBind st_bind;
	nErrorCode = ${1:func_name}(pConnection,${2:m_InData.LATN_ID},${3:st_bind});
	if(nErrorCode < 0) {
		this->SetErrorMsg(-1,"{\'RESULT\':\'1\',\'RESULT_MSG\':\'更新营销资源实例状态失败\',\'MKT_RES_INST_CODE\':\'%s\'}",iter->MKT_RES_INST_CODE);
		return -1; 
	}
#end crm_callfuncsql
snippet crm_add_extra_sql 动态增加额外的sql语句
	//动态增加额外的sql语句
	char tmpSql[4096] = {0};
	strcpy(tmpSql, pSql);
	//string参数
	if (m_InData.$1[0] != '\0')
	{
		strcat(tmpSql, "$2");
		dbAgent.BindExtraParam(m_InData.$1);
	}
	//long参数
	if (m_InData.$3 > 0)
	{
		strcat(tmpSql, "$4");
		dbAgent.BindExtraParam(m_InData.$1);
	}
	pSql = tmpSql;
#end crm_add_extra_sql ------
snippet crm_bind_extra 动态绑定额外的sql语句
	//动态绑定额外的sql参数
	//绑定额外string参数    
	if (m_InData.$1[0] != '\0')
	{
		dbAgent.BindExtraParam(m_InData.$1);
	}
	//绑定额外long参数
	if (m_InData.$2 > 0)
	{
		dbAgent.BindExtraParam(m_InData.$2);
	}
#end crm_bind_extra ------
snippet crm_split_field 拆分以 ‘,’ 分隔开来的多个参数
	char *p = strtok(m_InData.${1:}, ",");
	while (p) {
		${2:}

		p = strtok(NULL, ",");
	}
#end crm_split_field ------
snippet crm_split_field 直接代码里面硬绑定in条件，以 ‘,’ 分隔开来的多个参数
	//绑定in条件,acc_nbrs是由","分隔开的多个参数
	char ${1:}[4096] = {0};
	char *p = strtok(m_InData.${2:}, ",");
	while (p) {
		strcat($1, p);
		strcat($1,"','");
		p = strtok(NULL,",");
	}
	$1[strlen($1) - 3] = '\0';
	CRM_LOG((LC_DEBUG, "adam_fuck:in',':[%s]\n", $1));
#end crm_split_field ------
snippet getcol 必传参数,string类型
	//必传参数的获取
	if (pSubBuffer->GetValue("$1",m_InData.${1:adam_getcol_1}) < 0)
	{
		//emlogger(LC_ERROR,"[objectName : %s] GetInputParam is Failed get parameter[$1] failed",this->GetClassName());
		//this->SetErrorMsg(CRM_ERROR_SERVICE_GETINPUT_FAILED,"get parameter[$1] failed");
		//return -1;
	}
	emlogger(LC_DEBUG,"get parameter[$1]  is %s",m_InData.$1);
	getcol
snippet getcol 必传参数,long类型
	//必传参数的获取
	if (pSubBuffer->GetValue("$1",(char*)&m_InData.${1:adam_getcol_1}) < 0)
	{
		emlogger(LC_ERROR,"[objectName : %s] GetInputParam is Failed get parameter[$1] failed",this->GetClassName());
		this->SetErrorMsg(CRM_ERROR_SERVICE_GETINPUT_FAILED,"get parameter[$1] failed");
		return -1;
	}
	emlogger(LC_DEBUG,"get parameter[$1]  is %ld",m_InData.$1);
	getcol
snippet getvalue 必传参数,string类型
	//必传参数的获取
	if (pTuxBuffer->GetValue("$1",m_InData.${1:adam_getvalue_1}) < 0)
	{
		emlogger(LC_ERROR,"[objectName : %s] GetInputParam is Failed get parameter[$1] failed",this->GetClassName());
		this->SetErrorMsg(CRM_ERROR_SERVICE_GETINPUT_FAILED,"get parameter[$1] failed");
		return -1;
	}
	emlogger(LC_DEBUG,"get parameter[$1]  is %s",m_InData.$1);
	getvalue
snippet getvalue 必传参数,long类型
	//必传参数的获取
	if (pTuxBuffer->GetValue("$1",(char*)&m_InData.${1:adam_getvalue_1}) < 0)
	{
		emlogger(LC_ERROR,"[objectName : %s] GetInputParam is Failed get parameter[$1] failed",this->GetClassName());
		this->SetErrorMsg(CRM_ERROR_SERVICE_GETINPUT_FAILED,"get parameter[$1] failed");
		return -1;
	}
	emlogger(LC_DEBUG,"get parameter[$1]  is %ld",m_InData.$1);
	getvalue
snippet getvalue 必传参数,long类型，需要从string转换为long
	//必传参数的获取，需要从string转换为long
	char tmpStr[128] = {0};
	if (pTuxBuffer->GetValue("$1", tmpStr) < 0)
	{
		emlogger(LC_DEBUG,"[objectName : %s] GetInputParam get parameter[$1] empty",this->GetClassName());
		this->SetErrorMsg(CRM_ERROR_SERVICE_GETINPUT_FAILED,"get parameter[$1] failed");
		return -1;
	}
	m_InData.${1:adam_getvalue_1} = atol(tmpStr);
	emlogger(LC_DEBUG,"get parameter[$1]  is %ld",m_InData.$1);
	getvalue
snippet getvalue 可选参数,string类型
	//可选参数的获取
	pTuxBuffer->GetValue("$1", m_InData.${1:adam_getvalue_1});
	emlogger(LC_DEBUG,"get parameter[$1]  is %s",m_InData.$1);
	getvalue
snippet getvalue 可选参数,long类型，需要从string转换为long
	//可传参数的获取，需要从string转换为long
	char tmpStr[128] = {0};
	if (pTuxBuffer->GetValue("$1", tmpStr) < 0)
	{
		emlogger(LC_DEBUG,"[objectName : %s] GetInputParam get parameter[$1] empty",this->GetClassName());
	}
	else
	{
		//"" 传空值也会转换为0
		m_InData.${1:adam_getvalue_1} = atol(tmpStr);
		emlogger(LC_DEBUG,"get parameter[$1]  is %s",m_InData.$1);
	}
	getvalue
snippet getvalue 伪函数入参获取, string类型
	// 伪函数参数获取, string类型
	char pre_func_in_str[128] = {0};
	if (pTuxBuffer->GetValue("$1", pre_func_in_str) < 0)
	{
		//emlogger(LC_DEBUG,"[objectName : %s] GetInputParam get parameter[$1] empty",this->GetClassName());
		//this->SetErrorMsg(CRM_ERROR_SERVICE_GETINPUT_FAILED,"get parameter[PROD_INST_ID] failed");
		//return -1;
	}
	emlogger(LC_DEBUG,"get pre func in parameter[$1]  is %s", pre_func_in_str);
	if (GetSepcValue("$1", pre_func_in_str, m_InData.LATN_ID, m_InData.$1) <0 ) {
		emlogger(LC_DEBUG,"[objectName : %s] GetInputParam get parameter[$1] empty",this->GetClassName());
		this->SetErrorMsg(CRM_ERROR_SERVICE_GETINPUT_FAILED,"get parameter[$1] failed");
		return -1;
	}
	emlogger(LC_DEBUG,"get parameter[$1]  is %s",m_InData.${1:adam_param_1});
	getvalue
snippet getvalue 伪函数入参获取, long类型
	// 伪函数参数获取, long类型
	char pre_func_in_str[128] = {0};
	if (pTuxBuffer->GetValue("$1", pre_func_in_str) < 0)
	{
		//emlogger(LC_DEBUG,"[objectName : %s] GetInputParam get parameter[$1] empty",this->GetClassName());
		//this->SetErrorMsg(CRM_ERROR_SERVICE_GETINPUT_FAILED,"get parameter[PROD_INST_ID] failed");
		//return -1;
	}
	emlogger(LC_DEBUG,"get pre func in parameter[$1]  is %s", pre_func_in_str);
	char tmpStr[32] = {0};
	if (GetSepcValue("$1", pre_func_in_str, m_InData.LATN_ID, tmpStr) <0 ) {
		emlogger(LC_DEBUG,"[objectName : %s] GetInputParam get parameter[$1] empty",this->GetClassName());
		this->SetErrorMsg(CRM_ERROR_SERVICE_GETINPUT_FAILED,"get parameter[$1] failed");
		return -1;
	}
	m_InData.${1:adam_param_1} = atol(tmpStr);
	emlogger(LC_DEBUG,"get parameter[$1]  is %ld",m_InData.$1);
	getvalue
snippet setcol 设置参数,string类型
	pDataBuffer->RsSetCol("$1", iter->${1:adam_setcol_1});
	emlogger(LC_DEBUG,"set parameter[$1]  is %s",iter->$1);
	setcol
snippet setcol 设置参数,long类型
	pDataBuffer->RsSetCol("$1", (char*)&iter->${1:adam_setcol_1});
	emlogger(LC_DEBUG,"set parameter[$1]  is %ld",iter->$1);
	setcol
snippet setcol 设置参数,long类型,需要转换为string
	char tmpStr[32] = {0};
	sprintf(tmpStr, "%ld", iter->${1:adam_setval_1});
	pDataBuffer->RsSetCol("$1", tmpStr);
	emlogger(LC_DEBUG,"set parameter[$1]  is %ld",iter->$1);
	setcol
snippet setval 设置参数,string类型
	pTuxBuffer->SetValue("$1", m_OutData.${1:adam_setval_1});
	emlogger(LC_DEBUG,"set parameter[$1]  is %s",m_OutData.$1);
	setval
snippet setval 设置参数,long类型
	pTuxBuffer->SetValue("$1", (char*)&m_OutData.${1:adam_setval_1});
	emlogger(LC_DEBUG,"set parameter[$1]  is %ld",m_OutData.$1);
	setval
snippet setval 设置参数,long类型,需要转换为string类型
	char tmpStr[32] = {0};
	sprintf(tmpStr, "%ld", m_OutData.${1:adam_setval_1});
	pTuxBuffer->SetValue("$1", tmpStr);
	setval
snippet replacesql
	ReplaceSql((cntKey,"{[LATN_ID:%ld]}", ${1:m_InData.LATN_ID}));
snippet replacesql2
	pSql= (char*)ReplaceSql((cntKey, (char *)${2:pSql}, ${1:m_InData.LATN_ID}));
snippet crm_log debug
	CRM_LOG((LC_DEBUG,"${1:}"));$2
# end crm_log
###########################################################################
###########下面是配置文件模板##############################################
###########################################################################
snippet crm_param string
	param=${1:}
	type=string
	access=${3:out}
	size=${2:32}
	requiredcount=1
	count=1
snippet crm_param long
	param=${1:}
	type=long
	access=${2:out}
	size=8
	requiredcount=1
	count=1
snippet crm_param fml32
	param=${1:}
	type=fml32
	access=${2:out}
	size=0
	requiredcount=0
	count=0
###########################################################################
###########下面是特殊模板，可能同上面的模板是一模一样######################
###########################################################################
snippet crm_getinput1 json入参传入多个对象参数
	DCTuxBuffer *pTuxBuffer = (DCTuxBuffer*)pBuffer;
	DCTuxBuffer *pSubBuffer = NULL;
	//json入参传入多个对象参数
	ST${2:`Filename()`}_in        st$2_in;

	//开始获取传入json参数，并存储到特定的数据结构中去
	pTuxBuffer->RsOpen();
	//json入参传入多个对象参数
	while(pTuxBuffer->RsFetchRow())
	{
		//获取到入参对象，存储起来
		int ret = pTuxBuffer->RsGetNestedCol("${1:adam_getinput_1}",(DCBuffer**)&pSubBuffer);
		if (ret < 0)
		{
			emlogger(LC_ERROR,"get parameter[$1] failed");
			return CRM_ERROR_SERVICE_GETINPUT_FAILED;
		}
		if (ret == 0)
		{
			continue;
		}

		memset(&st$2_in, 0x00, sizeof(st$2_in));

		// TODO: 获取参数
		getcol$3
		
		m_InDataList.push_back(st$2_in);
	}
#end crm_getinput ------
snippet crm_getinput2 json入参传入单个单个的参数
	DCTuxBuffer *pTuxBuffer = (DCTuxBuffer*)pBuffer;
	// TODO: json入参传入单个单个的参数
	getvalue$1
#end crm_getinput ------
snippet crm_setoutput1 json出参传出多个对象参数
	DCTuxBuffer *pTuxBuffer = (DCTuxBuffer*)pBuffer;
	// TODO: json出参传出多个对象参数
	DCTuxBuffer *pDataBuffer = NULL;
	char retFml32Tag[32] = "${2:adam_setoutput_1}";

	//申请返回结果的tuxedo Buffer
	pDataBuffer = (DCTuxBuffer *)(pTuxBuffer->CreateNesteBuffer(retFml32Tag,sizeof(ST${2:`Filename()`}_out) * m_OutDataList.size(), (int)SEND_BUF));
	if(pDataBuffer == NULL)
	{
		CRM_LOG((LC_ERROR,"create nested buffer respBody failed"));
		this->SetErrorMsg(CRM_ERROR_BUFPTR_ISNULL,"[objectName : %s] SetOutputParam is Failed",this->GetClassName());
		return -1;
	}

	pDataBuffer->RsOpen();
	list<ST$2_out>::iterator iter = m_OutDataList.begin();
	for (; iter != m_OutDataList.end(); iter++)
	{
		pDataBuffer->RsAddRow();
		// TODO: 设置多个传出参数
		setcol$3
		pDataBuffer->RsSaveRow();
	}

	//设置返回Buffer
	pTuxBuffer->SetfValue(retFml32Tag, pDataBuffer);
#end crm_setoutput ------
snippet crm_setoutput2 json出参传出单个单个的参数
	DCTuxBuffer *pTuxBuffer = (DCTuxBuffer*)pBuffer;
	// TODO: 传出单个的出参
	setval$1
#end crm_setoutput ------
snippet getcol1 必传参数,string类型
	//必传参数的获取
	if (pSubBuffer->GetValue("$1",m_InData.${1:adam_getcol_1}) < 0)
	{
		//emlogger(LC_ERROR,"[objectName : %s] GetInputParam is Failed get parameter[$1] failed",this->GetClassName());
		//this->SetErrorMsg(CRM_ERROR_SERVICE_GETINPUT_FAILED,"get parameter[$1] failed");
		//return -1;
	}
	emlogger(LC_DEBUG,"get parameter[$1]  is %s",m_InData.$1);
	getcol
snippet getcol2 必传参数,long类型
	//必传参数的获取
	if (pSubBuffer->GetValue("$1",(char*)&m_InData.${1:adam_getcol_1}) < 0)
	{
		//emlogger(LC_ERROR,"[objectName : %s] GetInputParam is Failed get parameter[$1] failed",this->GetClassName());
		//this->SetErrorMsg(CRM_ERROR_SERVICE_GETINPUT_FAILED,"get parameter[$1] failed");
		//return -1;
	}
	emlogger(LC_DEBUG,"get parameter[$1]  is %ld",m_InData.$1);
	getcol
snippet getvalue1 必传参数,string类型
	//必传参数的获取
	if (pTuxBuffer->GetValue("$1",m_InData.${1:adam_getvalue_1}) < 0)
	{
		//emlogger(LC_ERROR,"[objectName : %s] GetInputParam is Failed get parameter[$1] failed",this->GetClassName());
		//this->SetErrorMsg(CRM_ERROR_SERVICE_GETINPUT_FAILED,"get parameter[$1] failed");
		//return -1;
	}
	emlogger(LC_DEBUG,"get parameter[$1]  is %s",m_InData.$1);
	getvalue
snippet getvalue2 必传参数,long类型
	//必传参数的获取
	if (pTuxBuffer->GetValue("$1",(char*)&m_InData.${1:adam_getvalue_1}) < 0)
	{
		//emlogger(LC_ERROR,"[objectName : %s] GetInputParam is Failed get parameter[$1] failed",this->GetClassName());
		//this->SetErrorMsg(CRM_ERROR_SERVICE_GETINPUT_FAILED,"get parameter[$1] failed");
		//return -1;
	}
	emlogger(LC_DEBUG,"get parameter[$1]  is %ld",m_InData.$1);
	getvalue
snippet setcol1 设置参数,string类型
	pDataBuffer->RsSetCol("$1", iter->${1:adam_setcol_1});
	emlogger(LC_DEBUG,"set parameter[$1]  is %s",iter->$1);
	setcol
snippet setcol2 设置参数,long类型
	pDataBuffer->RsSetCol("$1", (char*)&iter->${1:adam_setcol_1});
	emlogger(LC_DEBUG,"set parameter[$1]  is %ld",iter->$1);
	setcol
snippet setval1 设置参数,string类型
	pTuxBuffer->SetValue("$1", m_OutData.${1:adam_setval_1});
	emlogger(LC_DEBUG,"set parameter[$1]  is %s",m_OutData.$1);
	setval
snippet setval2 设置参数,long类型
	pTuxBuffer->SetValue("$1", (char*)&m_OutData.${1:adam_setval_1});
	emlogger(LC_DEBUG,"set parameter[$1]  is %ld",m_OutData.$1);
	setval
