# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	
	private:
		${3:/* data */}
	};

snippet try
	try {
		${1:/* code */}
	} catch(${2:const std::exception& e}) {
		${3:std::cerr << e.what() << '\n';}
	}

snippet formap
	map<${3:int}, ${4:string}>::iterator ${1:iter};
	for (${1:iter} = ${2:mMap}.begin(); ${1:iter} != ${2:mMap}.end(); ++${1:iter}) {
		${5:/* code */}
	}

snippet forlist
	list<${2:string}>::iterator ${0:iter};
	for (${0:iter} = ${1:lList}.begin(); ${0:iter} != ${1:lList}.end(); ++${0:iter}) {
		${3:/* code */}
	}

snippet forvector
	vector<${3:string}>::iterator ${1:iter};
	for (${1:iter} = ${2:vVec}.begin(); ${1:iter} != ${2:vVec}.end(); ++${1:iter}) {
		${4:/* code */}
	}

# -------------------------------------------------------------------------
# utility
snippet atoi
	hydra::fs2u32(${1:str})${2}
snippet itoa
	hydra::fi2s(${1:i}).s${2}
snippet now
	HYDRA_TSC_NOW()
snippet op_less
	bool operator < (const one &a) const{
		return key < a.key;
	}
snippet op_less2
	inline bool operator<(const one &a, const one &b)
	{
		return a.key < b.key;
	}
snippet op_equal
	inline bool operator==(const one &a, const one &b)
	{
		return a.key == b.key;
	}
# -------------------------------------------------------------------------
snippet split_field 拆分以 ‘,’ 分隔开来的多个参数
	char *p = strtok(m_InData.${1:}, ",");
	while (p) {
		${2:}

		p = strtok(NULL, ",");
	}
#end split_field ------
snippet split_field 直接代码里面硬绑定in条件，以 ‘,’ 分隔开来的多个参数
	//绑定in条件,acc_nbrs是由","分隔开的多个参数
	char ${1:}[4096] = {0};
	char *p = strtok(m_InData.${2:}, ",");
	while (p) {
		strcat($1, p);
		strcat($1,"','");
		p = strtok(NULL,",");
	}
	$1[strlen($1) - 3] = '\0';
#end split_field ------
