snippet check_lib easy one
	dnl
	dnl AM_LIB_$1: figure out where $1 is located
	dnl
	AC_DEFUN([AM_LIB_$1], [
		${1:?lib?}="no"
		$1_prefix="ERROR"
		AC_ARG_WITH($1,[  --with-$1              Compile with $1 library, for output.],[$1_prefix=$withval $1="yes"],[])

		if [[ "$$1" == "no" ]]; then
			AC_MSG_ERROR([$1 could not be located. Please use the --with-$1 option.])
		fi

		if test $$1 = 'yes'; then
			$1_INC=" -I${$1_prefix}/include"
			$1_LIB=" -L${$1_prefix}/lib -l$1"

			AC_MSG_CHECKING([for $1.h])
			AS_IF([test -f ${$1_prefix}/include/$1.h],
				[AC_MSG_RESULT(yes)],
				[AC_MSG_ERROR([Cannot find $1.h])])

			AC_SUBST($1_INC)
			AC_SUBST($1_LIB)
		fi
	])
# end snip check_lib

snippet check_lib already have lib find func
	dnl
	dnl AM_LIB_$1: figure out where $1 is located
	dnl
	AC_DEFUN([AM_LIB_$1], [
		dnl use the find_$1.m4 script to locate $1. sets $1_found and $1_config
		$1_FIND_$1(,,,[1])
		if test "$$1_found" = "no"; then
			AC_MSG_ERROR($1 could not be located. Please use the --with-$1 option.)
		fi

		$1_INC="`$$1_config --includes`"
		$1_LIB="`$$1_config --link-ld`"

		AC_SUBST($1_INC)
		AC_SUBST($1_LIB)
	])
# end snip check_lib
